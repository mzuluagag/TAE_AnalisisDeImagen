install.packages("pixmap")
read.pnm(file.choose())
read.pnm(system.file(file.choose()))
library(pixmap)
read.pnm(file.choose())
a<-read.pnm(file.choose())
View(a)
View(a)
plot(a)
print(a)
a@grey
aux<-as.data.frame(a@grey)
View(aux)
round(aux)
ra<-round(a,2)
?round
ra<-round(a,digits=2)
ra<-round(a)
ra<-round(aux,2)
View(ra)
random(c(1:4))
randomize
c(1:4)
sample(c(1:4))
?read.txt
gusanos<-read.delim(file.choose(),header=T)
View(gusanos)
plot(gusanos$Abu_Lomb,gusanos$pH, pch=16, type=p)
plot(gusanos$Abu_Lomb,gusanos$pH, pch=16, type="p")
plot(gusanos$BH,gusanos$pH, pch=16, type="p")
plot(gusanos$HZ_A,gusanos$pH, pch=16, type="p")
plot(gusanos$HZ_A,gusanos$pH, pch=16, type="p", main="HZ_A vs pH", xlab="HZ_A", ylab="pH")
hist(gusanos$MO)
hist(gusanos$MO, col="chartreuse")
hist(gusanos$MO, col="chartreuse", main="Histograma para MO", ylab="Frecuencia", xlab="MO")
par(mfrow=c(2,1))
plot(gusanos$HZ_A,gusanos$pH, pch=16, type="p", main="HZ_A vs pH", xlab="HZ_A", ylab="pH")
hist(gusanos$MO, col="chartreuse", main="Histograma para MO", ylab="Frecuencia", xlab="MO")
par(mfrow=c(1,2))
plot(gusanos$HZ_A,gusanos$pH, pch=16, type="p", main="HZ_A vs pH", xlab="HZ_A", ylab="pH")
hist(gusanos$MO, col="chartreuse", main="Histograma para MO", ylab="Frecuencia", xlab="MO")
par(mfrow=c(2,1))
plot(gusanos$HZ_A,gusanos$pH, ,col="orangered",pch=19, type="p", main="HZ_A vs pH", xlab="HZ_A", ylab="pH")
hist(gusanos$MO, col="chartreuse", main="Histograma para MO", ylab="Frecuencia", xlab="MO")
par(mfrow=c(1,2))
plot(gusanos$HZ_A,gusanos$pH, ,col="orangered",pch=19, type="p", main="HZ_A vs pH", xlab="HZ_A", ylab="pH")
hist(gusanos$MO, col="chartreuse", main="Histograma para MO", ylab="Frecuencia", xlab="MO")
herpetos<-read.delim(file.choose(), header=T)
View(herpetos)
herpetos$Especie<-droplevels(herpetos$Especie)
View(herpetos)
herpetos<-read.delim(file.choose(), header=T)
nlevels(herpetos$Especie)
herpetos<-read.delim(file.choose(), header=T)
View(herpetos)
herpetos$Probabilidad.de.presencia<-droplevels(herpetos$Probabilidad.de.presencia)
herpetos$Especie<-droplevels(herpetos$Especie)
View(herpetos)
herpetos<-read.delim(file.choose(), header=T)
View(herpetos)
herp<-subset(herp$Especie="S. phaeota")
herp<-subset(herp$Especie=="S. phaeota")
herp<-subset(herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
View(herp)
herp<-subset(herp,herpetos$Especie=="S. phaeota")
herp<-subset(herp,herpetos$Especie==S. phaeota)
View(herpetos)
herp<-subset(herp, Especie=="S. phaeota")
str(herpetos)
herpetos$Especie<-as.character(herpetos$Especie)
herp<-subset(herp, Especie=="S. phaeota")
herp<-subset(herp,herpetos$Especie==S. phaeota)
herp<-subset(herp,herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
rm(herp)
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Area==1)
View(herp)
herp<-subset(herpetos,herpetos$Especie=="Leposoma rugiceps")
View(herp)
View(herpetos)
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Especie=="D. ebraccatus")
herpetos<-read.delim2(file.choose(), header=T)
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
View(herpetos)
herpetos$Especie[5]
herp<-subset(herpetos,herpetos$Especie=="S.phaeota")
herp<-subset(herpetos,herpetos$Especie=="S. phaeota")
herp<-subset(herpetos,herpetos$Especie==herpetos$Especie[5])
View(herp)
levels(herpetos)
levels(herpetos$Especie)
levels(herpetos$Especie)[1]
levels(herpetos$Especie)[5]
levels(herpetos$Especie)[5])=="S. phaeota"
levels(herpetos$Especie)[5]=="S. phaeota"
levels(herpetos$Especie)[5]=="S. phaeota "
View(herp)
View(herpetos)
herp<-subset(herpetos,Especie=="S. phaeota "|Especie=="D. ebraccatus ")
boxplot(herp)
boxplot(Probabilidad.de.presencia~Especie)
str(herp)
boxplot(herp$Probabilidad.de.presencia~herp$Especie)
boxplot(Probabilidad.de.presencia~Especie)
attach(herp)
boxplot(Probabilidad.de.presencia~Especie)
boxplot(Probabilidad.de.presencia~Especie,data=herp)
str(herp)
herp$Probabilidad.de.presencia<-as.numeric(herp$Probabilidad.de.presencia)
boxplot(Probabilidad.de.presencia~Especie,data=herp)
boxplot(herp$Probabilidad.de.presencia~herp$Especie,data=herp)
herp$Especie<-droplevels(herp$Especie)
boxplot(herp$Probabilidad.de.presencia~herp$Especie,data=herp)
View(herp)
herpetos<-read.delim(file.choose(), header=T)
herp<-subset(herpetos,Especie=="S. phaeota "|Especie=="D. ebraccatus ")
herp$Probabilidad.de.presencia<-as.numeric(herp$Probabilidad.de.presencia)
herp$Especie<-droplevels(herp$Especie)
boxplot(herp$Probabilidad.de.presencia~herp$Especie,data=herp)
boxplot(herp$Probabilidad.de.presencia~herp$Especie,data=herp,col=c("red","blue"),main="Proporción de las especies seleccionadas",ylab="Probabilidad")
boxplot(herp$Probabilidad.de.presencia~herp$Especie,col=c("red","blue"),main="Proporción de las especies seleccionadas",ylab="Probabilidad")
rm(list=ls())
aux<-read.csv2(file.choose())
View(aux)
aux<-read.csv2(file.choose(),sep=",")
View(aux)
View(aux)
aux1<-matrix(aux)
image(aux1)
aux1
aux1<-as.numeric(aux1)
str(aux1)
image(aux1)
image(aux)
?image
m = matrix(runif(100),10,10)
image(m, axes = FALSE, col = grey(seq(0, 1, length = 256)))
image(aux1, axes = FALSE, col = grey(seq(0, 1, length = 256)))
View(aux1)
View(m)
View(aux1)
aux1<-as.matrix(aux)
aux2<-as.matrix(aux)
View(aux1)
image(aux1, axes = FALSE, col = grey(seq(0, 1, length = 256)))
image(aux1)
stopp
daaf
install.packages(c("neuralnet", "tensorflow"))
rm(list=ls())
library(tensorflow)
install_tensorflow(version = "gpu")
library(tensorflow)
install_tensorflow(version = "gpu")
install.packages(c("reticulate", "tensorflow", "keras"))
shiny::runApp('GitHub/TAE_AnalisisDeImagen/ShinyApp')
install.packages("openssl")
runApp('GitHub/TAE_AnalisisDeImagen/ShinyApp')
install.packages(c("openssl", "rlang"))
runApp('GitHub/TAE_AnalisisDeImagen/ShinyApp')
shiny::runApp('GitHub/TAE_AnalisisDeImagen/ShinyApp')
library(pixmap)
library(stringr)
library(keras)
setwd("~/GitHub/TAE_AnalisisDeImagen/faces")
listaArchivos<-list.files(pattern=".pgm$")
data<-NULL
images <- list()
for (i in 1:length(listaArchivos)){
images[[i]] <- read.pnm(listaArchivos[i])
data<-rbind(data,as.vector(images[[i]]@grey))
}
resp<-c()
for (i in 1:length(listaArchivos)){
if (!is.na((str_extract(listaArchivos[i],"open")=="open"))){
resp[i]<-"open"
}
else if (!is.na((str_extract(listaArchivos[i],"sunglasses")=="sunglasses"))){
resp[i]<-"sunglasses"
}
}
resp=gsub("open",0,resp)
resp=gsub("sunglasses",1,resp)
train <-to_categorical(resp)
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(960)) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dense(units = 2, activation = 'softmax')
#compile
model %>%
compile(loss = 'binary_crossentropy',
optimizer = optimizer_rmsprop(),
metrics = c('accuracy'))
# Fit Model
history <- model %>%
fit(data,
train,
epochs = 30,
batch_size = 32)
model %>% evaluate(data, train)
pred<-model%>%predict_classes(data)
z<-table(Predicted = pred, Actual = train[,2])
tablaRes<-as.data.frame(z)
# a<-array_reshape(data[2,],c(1,960))
# predict_classes(model,a)
#
# model %>% save_model_hdf5("my_model.h5")
# model<-load_model_hdf5("red")
DetectorGafas<-function(x){
img<-read.pnm(x,cellres=1)
calc<-array_reshape(as.vector(img@grey),c(1,960))
total<-predict_classes(modelof,calc)
return(total)
}
pip3 install --upgrade tensorflow
devtools::install_github("rstudio/keras")
install.packages("openssl")
devtools::install_github("rstudio/keras")
create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages(c("pixmap", "stringr", "keras", "neuralnet", "reticulate"))
install.packages(c("shiny", "shinythemes", "rmarkdown", "xlsx", "xtable", "MASS", "raster"))
rm(list=ls())
modelof<-load_model_hdf5("www/red")
library(keras)
library(keras)
modelof<-load_model_hdf5("www/red")
library("reticulate")
use_python("/usr/bin/python", required = T)
devtools::install_github("rstudio/keras")
install.packages(c("devtools", "rsconnect"))
devtools::install_github("rstudio/keras")
install.packages("rlang")
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
library(rlang)
install.packages("rlang")
devtools::install_github("rstudio/keras")
shiny::runApp('~/GitHub/TAE_AnalisisDeImagen/ShinyApp')
library(shiny)
library(pixmap)
library(stringr)
library(keras)
library(shinythemes)
install.packages(c("openssl", "rlang"))
shiny::runApp('~/GitHub/TAE_AnalisisDeImagen/ShinyApp')
modelof<-load_model_hdf5("www/red")
library(keras)
use_condaenv("r-tensorflow")
runApp('~/GitHub/TAE_AnalisisDeImagen/ShinyApp')
install_keras(tensorflow = "gpu")
